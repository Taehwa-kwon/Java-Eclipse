package com.pknu.member.view;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

//개인정보 : 조회 , 추가, 수정, 삭제
public class MemberProc extends JFrame implements ActionListener { //JFrame을 상속받는다. 이벤트를 쓰려고 하면 반드시 addActionLisner을 반드시 불러야 한다. 
	//인터페이스 임플리먼트하면 안에있는 함수를 반드시 추가해야한다.  인터페이스를 재정의 해야한다. 
	
	//Layout
	GridBagLayout gb;
	GridBagConstraints gbc; //GridBagLayout은 항상 통제를 받는다. 
	
				//GridLayout은 셀 영역이 (1x1) 모두 같은 형태이지만 
				//GridBagLayout 은 엑셀처럼 셀을 병합하여 사용자가 원하는 스타일로 지정할 수 있습니다.
	
	//Components : 부품들 
	JPanel p;	//여러가지를 한번에 담기 위해서 쓰는것. 
	JTextField txtId, txtName;
	JComboBox cbJob;
	JPasswordField txtPwd;
	JRadioButton rbMan,rbWoman;
	JTextArea taIntro;
	JButton btnInsert, btnCancel, btnUpdate, btnDelete;
	

	//기본생성자(화면설정)(new하면 이게 기본적으로 실행됌) 
	public MemberProc() {
		super(" 회원 상세 정보");

		createUI();//화면구성
		
		this.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
		this.setSize(350,350);
		this.setVisible(true);
		this.setLocationRelativeTo(null); // 프레임 실행시 위치 중앙
	}

	//기본 생성자 
	 MemberProc(MemberList memberList) {
		this(); //내 기본생성자를 호출해라. 
	}

	 //화면 컴포넌트 배치 
	private void createUI() {
		gb = new GridBagLayout();		
		this.getContentPane().setLayout(gb);//  현재 설정되어있는 화면에 그리드백레이아웃을 설정넣고. 
		gbc = new GridBagConstraints();  //GridBagConstraints + GridBagLayout 세트다 .  
		gbc.fill= GridBagConstraints.NONE; //BOTH, HORIZONTAL, VERTICAL, NONE 이 있는데 
		// x,y축의 버튼안에  
		gbc.weightx = 1.0;//가중치
		gbc.weighty = 1.0;//가중치
		
		//아이디 
		JLabel JL_id = new JLabel("아이디:");
		txtId = new JTextField(20);
		//그리드백에 붙이기
		gbAdd(JL_id,0,0,1,1);
		gbAdd(txtId,1,0,1,1);
		
		//비밀번호
		JLabel JL_Pwd = new JLabel("패스워드: ");
		txtPwd = new JPasswordField(20);
		gbAdd(JL_Pwd,0,1,1,1);
		gbAdd(txtPwd,1,1,1,1);
		
		//이름
		JLabel JL_name = new JLabel("이름: ");
		txtName = new JTextField(20);
		gbAdd(JL_name,0,2,1,1);
		gbAdd(txtName,1,2,1,1);
		
		//직업
		JLabel JL_Job = new JLabel("직업: ");
		String [] jobList = {"---","직장","학생","무직"};
		cbJob = new JComboBox(jobList);
		gbAdd(JL_Job,0,3,1,1);
		gbAdd(cbJob,1,3,1,1);
		
		//성별
		JLabel JL_Gender = new JLabel("성별: ");
		
		rbMan = new JRadioButton("남",false);
		rbWoman = new JRadioButton("여",true); //true 미리 선택된 것 
		
		ButtonGroup btnGroup = new ButtonGroup(); // RadioButton 안에서 이거 2개를 그룹화 시켜줌, 만약에 이걸 안하면 모두다 따로 놀아버림 ..   
		btnGroup.add(rbMan);
		btnGroup.add(rbWoman);
		
		JPanel panGender = new JPanel(); //Panel이란 ? 성별 옆에 RadioButton이 있잖아. 그걸 한 덩이로 묶어줘야지 . 그게 Panel이 되는거지 . 
										//봐봐.. 맥,window,Linux에 있는 awt가 전부다 다르잖아. 버튼모양,형식 이것저것 그래서 swing은 이 모든걸 모아서 gui요소로 만든거야. J가 붙는것은 보이는 요소. 
		panGender.add(rbMan);
		panGender.add(rbWoman);
		
		gbAdd(JL_Gender,0,4,1,1);
		gbAdd(panGender,1,4,1,1);
		
		//Married , Single
		JLabel  JL_Married = new JLabel("기혼/미혼: ");

		JRadioButton Married = new JRadioButton("결혼");
		JRadioButton Single = new JRadioButton("싱글"); //true 미리 선택된 것 

//		ButtonGroup btnGroup = new ButtonGroup();
//		btnGroup.add(Married);
//		btnGroup.add(Single);

		JPanel pan_Married = new JPanel(); //Panel이란 ? 성별 옆에 RadioButton이 있잖아. 그걸 한 덩이로 묶어줘야지 . 그게 Panel이 되는거지 . 
		//봐봐.. 맥,window,Linux에 있는 awt가 전부다 다르잖아. 버튼모양,형식 이것저것 그래서 swing은 이 모든걸 모아서 gui요소로 만든거야. J가 붙는것은 보이는 요소. 
		pan_Married.add(Married);
		pan_Married.add(Single);

		gbAdd(JL_Married,0,8,1,1);
		gbAdd(pan_Married,1,8,1,1);
		
		//자기소개  JTextArea taIntro;
		JLabel JL_Intro = new JLabel("자기소개 : ");
		taIntro = new JTextArea(5,20); //줄 + 칸
		JScrollPane Pane_Intro= new JScrollPane(taIntro); 
		gbAdd(JL_Intro , 0,5,1,1);
		gbAdd(Pane_Intro , 1,5,3,1);
		
		//버튼
		JPanel pButton = new JPanel(); //여러개를 한번에 담을때 JPanel을 쓴다. 
		btnInsert = new JButton("가입");
		btnCancel = new JButton("취소");
		btnUpdate = new JButton("수정");
		btnDelete = new JButton("삭제");
		pButton.add(btnInsert);
		pButton.add(btnCancel);
		pButton.add(btnUpdate);
		pButton.add(btnDelete);
		gbAdd(pButton, 0, 6, 4, 1);
		
		//버튼에 감지기를 붙이자 !!
		this.btnInsert.addActionListener(this); //여기서 implements를 해야한다. 
		this.btnUpdate.addActionListener(this);  
		this.btnDelete.addActionListener(this);  

		this.btnCancel.addActionListener(this);  
		
		// 방법 3. 람다식 : java 1.8이상에서만 작동한다.
		this.btnCancel.addActionListener((e)-> {
			System.out.println("취소가 클릭되었습니다.");
		});
		
		
		// 방법 2. 익명클래스라고 부른다. 클래스의 이름이 없고 여기안에서만 쓸려고. 
		//장점은 여기서 객체를 만들기 때문에 implement를 할 필요가 없다. 
		//단점은 공통인것을 하기에는 너무 복잡함. 그래서 맨 아래 actionPerformed override가 편하긴 함. 
		this.btnCancel.addActionListener(new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("취소가 눌러졌습니다.");
				
			}
		});
		
		
		
	}
	//그리드백 레이아웃에 부품을 붙이는 메소드 
	private void gbAdd(JComponent c, int x, int y, int w, int h) { //JComponent가 부모 클래스이며 gbAdd로 들어오는게 다양하니깐 간단하게 c로 규정해놓고 // 좌표를 말하니깐 xywh로 바꿔줌
		gbc.gridx = x; 
		gbc.gridy = y;
		gbc.gridwidth=w;
		gbc.gridheight=h;
		gb.setConstraints(c, gbc);
		gbc.insets = new Insets(2, 2, 2, 2);  //input의 창의 크기.
		this.getContentPane().add(c,gbc);	//바로 프레임안에 저장 가능 
		
		// TODO Auto-generated method stub
		
	}

	
//	//방법 1. 
//	@Override
//	public void actionPerformed(ActionEvent e) { //버튼4가지에 대한 재정의를 다해줘야 하니깐. 
//		JButton btn = (JButton) e.getSource();
//		System.out.println(btn.getText()+"버튼이 클릭 되었습니다. ");
//		//방법 1-1
//		switch(btn.getText()) {
//		case "가입": break;
//		case "취소": break;
//		case "수정": break;
//		case "삭제": break;
//		}
//		
//		//방법 1-2
//		if(e.getSource()==btnInsert) //여기서 e가 클릭된 정보를 가지고 있다. 
//			System.out.println("insert버튼 ");	
//	}
	
	//방법 1. 
	@Override
	public void actionPerformed(ActionEvent e) { //버튼4가지에 대한 재정의를 다해줘야 하니깐. 
		JButton btn = (JButton) e.getSource();
		System.out.println(btn.getText()+"버튼이 클릭 되었습니다. ");
		//방법 1-1
		switch(btn.getText()) {
		case "Add": insertMember(); break;
		case "취소": break;
		case "수정": break;
		case "삭제": break;
		}
		
	}

private void insertMember() {
	// TODO Auto-generated method stub
	
}
}
