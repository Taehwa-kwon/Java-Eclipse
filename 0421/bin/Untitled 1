ArrayList 진짜 중요하대..

배열: String [] words = new String [4];

	words ------>0번방
				>1번방
				>2번방
				>3번방
	words[0] = "Hello";
	words[1] = "Java";
	
	words ------>0번방---->Hello
				>1번방---->Java
				>2번방
				>3번방	
	
	
	
	컬렉션 : 변수들의 모음 ->배열이 떠오르는데 ( 문제점 배열은 사이즈를 변경할 수 없다.) -> 문제점을 해결해줄 수 있는것이 컬렉션(사이즈 변경이 가능하다 ) 
 
	기본타입은 컴파일할때 생성한다 ( 스택 영역에 생성 ) 
	레퍼런스타입은 new를 통해서 실행할때 힙에 생성 
	String [] names = new String [5]; string타입의 5가지 방이 생성된다 .

	컬렉션 : ArraryList al = new ArraryList();	//
	al.add(new Student(1,"a",100));					data저장하는 방법
	Student s1 = al.get(0); 						data가져오는 방법 (0번쨰 자료를 꺼내는것)
	
	String  [] names = new String [5];
	Student [] studs = new Student[5];
	studs   [0]		 = new Student(1,"a",100);
	Student s1 = studs[0];
	
	여기 코딩을 컬렉션으로 바꾸면
	
	ArraryList al =new ArrayList();			//기본사이즈로 지정된 data 저장공간 확보
	al.add( new Student (1, "a", 100) );	//data 저장 ( 사실 10개 까지는 java에서 제공하는데 10개 넘어갈경우 공간이 추가된다. 어쨌든 무조건 add를 시킨다.)
	Student s1 = al.get(0);					//data 가져오기
	al.add( new Student (2, "b", 90 ) ); 	//1위치에 저장
	al.add(10.5);							//2위치에 저장
											// al.add( Object obj ) : 변수 obj는 object 타입이다.
											// al.add( int v ) : 변수v는 int 타입이다.
	
											
	((Dog) ani).bark(); 또는 al.add(object obj)
	부모타입인 ani로 받으면 무조건 Dog로 캐스팅변환해서 brak를 호출해야한다. 그래서 매번 저 과정을 거쳐야 한다.
											
	또 다른 문제점 발생- 배열의 주 목적은 for문을 돌려 간편하게 사용하려고 하는데 서로 타입이 다른경우 for문을 아예 돌릴수가 없다.
	 
	al.add(7);
	al.add(3);
	al.add(5);
	al.add(5.5);
	al.add("이순신")
	
	그래서 다시 문제점을 해결할 수 있는 방법이 있는데 , 그것이 제너릭이다.
	ArrayList<Integer> list = new ArraryList<Integer>();			//int형 타입만 받겠다.
	list.add(7);
	list.add(3);
	list.add(5);
	list.add(5.5);				//Error
	list.add(이순신);				//Error	
	
	
	
	
	제너릭 : 해당 타입의 변수만 저장할 수 있도록 타입을 제한하는 것 